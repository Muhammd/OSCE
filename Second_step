## Second Step

# - Next step is to submit and get the next base64 encoded value which decodes as follows: ( you can use online decoder as well "https://www.base64decode.org".

mh@eppic:~/Desktop/OSCE$ echo "RW1haWw6IGdobWxx0bG9vay5jb20gLCBSZWdpc3RyYXRpb24gQ29kZTogNDUwMTYgfCBOb3cgZGVjb2RlIHlvdXIgQ1RQIFNlY3JldCBLZXkgYW5kIHlvdSBhcmUgZG9uZSEgOiBceDMxXHhDMFx4NTBceDY4XHg3Mlx4MjNceDc5XHg3M1x4NjhceDc5XHg3OFx4MjBceDIyXHg2OFx4NzBceDc3XHgyMlx4NzFceDY4XHg3NVx4NzdceDI0XHgyNVx4NjhceDcwXHgyM1x4MjNceDIwXHg2OFx4MjNceDI1XHg3OFx4NzFceDY4XHg3MFx4MjNceDcwXHgyM1x4NjhceDc4XHg3MFx4NzFceDc5XHg2OFx4NzFceDc4XHg3N1x4NzdceDY4XHgyMlx4NzdceDcyXHg3MVx4NjhceDc4XHgyMlx4MjVceDIzXHg2OFx4MjBceDc5XHg3Nlx4NzNceDY4XHg3Mlx4MjVceDc1XHgyNVx4NjhceDc2XHgyNVx4NzVceDcwXHg2OFx4NzRceDcyXHgyNVx4NzJceDY4XHg3MVx4MjJceDc5XHgyNVx4NjhceDc0XHg3OFx4NzNceDczXHg2OFx4NzBceDc2XHgyNFx4MjVceDY4XHg3NVx4NzZceDI3XHg3MFx4NjhceDIyXHg3N1x4NzBceDc4XHg2OFx4NzNceDIyXHg3OVx4NzVceDY4XHg3Nlx4NzFceDc2XHgyNFx4NjhceDcyXHg3NFx4MjdceDcwXHg2OFx4NzlceDIyXHgyM1x4NzhceDY4XHgyNVx4MjdceDIwXHgyMFx4NjhceDIwXHgyMFx4NzNceDc0XHg2OFx4NzJceDczXHgyNVx4NzNceDY4XHgyN1x4NzJceDIwXHg3NFx4NjhceDc0XHg3NFx4MjJceDI1XHg2OFx4MjdceDc4XHg3N1x4MjRceDY4XHgyM1x4MjdceDc1XHg3NFx4NjhceDcxXHg3NFx4NzNceDIwXHg1NFx4NUVceDhCXHhGRVx4OEJceEQ3XHhGQ1x4QjlceDgwXHgwMFx4MDBceDAwXHhCQlx4NDFceDAwXHgwMFx4MDBceDMxXHhDMFx4NTBceEFDXHgzM1x4QzNceEFBXHhFMlx4RkFceDU0XHg1RVx4Q0M=" |base64 -d


Email: xxxx@xxxx.com , Registration Code: 45016 | Now decode your CTP Secret Key and you are done! : \x31\xC0\x68\x72\x23\x79\x73\x68\x79\x78\x20\x22\x68\x70\x77\x22\x71\x68\x75\x77\x24\x25\x68\x70\x23\x23\x20\x68\x23\x25\x78\x71\x68\x70\x23\x70\x23\x68\x78\x70\x71\x79\x68\x71\x78\x77\x77\x68\x22\x77\x72\x71\x68\x78\x22\x25\x23\x68\x20\x79\x76\x73\x68\x72\x25\x75\x25\x68\x76\x25\x75\x70\x68\x74\x72\x25\x72\x68\x71\x22\x79\x25\x68\x74\x78\x73\x73\x68\x70\x76\x24\x25\x68\x75\x76\x27\x70\x68\x22\x77\x70\x78\x68\x73\x22\x79\x75\x68\x76\x71\x76\x24\x68\x72\x74\x27\x70\x68\x79\x22\x23\x78\x68\x25\x27\x20\x20\x68\x20\x20\x73\x74\x68\x72\x73\x25\x73\x68\x27\x72\x20\x74\x68\x74\x74\x22\x25\x68\x27\x78\x77\x24\x68\x23\x27\x75\x74\x68\x71\x74\x73\x20\x54\x5E\x8B\xFE\x8B\xD7\xFC\xB9\x80\x00\x00\x00\xBB\x41\x00\x00\x00\x31\xC0\x50\xAC\x33\xC3\xAA\xE2\xFA\x54\x5E\xCC

# one you get your hex code use the below c script and compile it as below.

#include <sys/mman.h>
#include <string.h>
#include <stdio.h>

char sc[]= "\\x31\xC0\x50\x68\x72\x23\x79\x73\x68\x79\x78\x20\x22\\x77\x22\x71\x68\x75\x77\x24\x25\x68\x70\x23\x23\x20\x68\x23\x25\x78\x71\x68\x70\x23\x70\x23\x68\x78\x70\x71\x79\x68\x71\x78\x77\x77\x68\x22\x77\x72\x71\x68\x78\x22\x25\x23\x68\x20\x79\x76\x73\x68\x72\x25\x75\x25\x68\x76\x25\x75\x70\x68\x74\x72\x25\x72\x68\x71\x22\x79\x25\x68\x74\x78\x73\x73\x68\x70\x76\x24\x25\x68\x75\x76\x27\x70\x68\x22\x77\x70\x78\x68\x73\x22\x79\x75\x68\x76\x71\x76\x24\x68\x72\x74\x27\x70\x68\x79\x22\x23\x78\x68\x25\x27\x20\x20\x68\x20\x20\x73\x74\x68\x72\x73\x25\x73\x68\x27\x72\x20\x74\x68\x74\x74\x22\x25\x68\x27\x78\x77\x24\x68\x23\x27\x75\x74\x68\x71\x74\x73\x20\x54\x5E\x8B\xFE\x8B\xD7\xFC\xB9\x80\x00\x00\x00\xBB\x41\x00\x00\x00\x31\xC0\x50\xAC\x33\xC3\xAA\xE2\xFA\x54\x5E\xCC";

int main(){
        void * a = mmap(0, 4096, PROT_EXEC |PROT_READ | PROT_WRITE, MAP_ANONYMOUS | MAP_SHARED, -1, 0);
        printf("allocated executable memory at: %p\n", a);
        ((void (*)(void)) memcpy(a, sc, sizeof(sc)))();
}

use gcc to compile the script. ( use below step )

nano shellcode.c (copy and paste the c script here in this file)
root@kali:~/Desktop# cat shellcode.c 
#include <sys/mman.h>
#include <string.h>
#include <stdio.h>

char sc[]= "\x31\xC0\x50\x68\x73\x22\x25\x77\x68\x76\x75\x23\x72\x72\x79\x74\x68\x25\x71\x23\x23\x68\x79\x72\x74\x27\x68\x73\x74\x70\x23\x68\x24\x25\x71\x74\x68\x22\x23\x71\x74\x68\x78\x73\x22\x72\x68\x20\x74\x70\x20\x68\x25\x74\x74\x75\x68\x22\x27\x71\x74\x68\x73\x22\x23\x75\x68\x77\x78\x71\x70\x68\x72\x25\x70\x75\x68\x76\x71\x77\x70\x68\x75\x72\x27\x79\x68\x70\x71\x22\x73\x68\x70\x73\x24\x20\x68\x76\x78\x76\x74\x68\x20\x71\x24\x79\x68\x70\x23\x72\x73\x68\x72\x76\x71\x20\x68\x70\x20\x73\x70\x68\x78\x23\x78\x25\x68\x20\x78\x73\x20\x68\x70\x22\x23\x74\x68\x77\x23\x22\x75\x68\x76\x23\x23\x23\x68\x79\x73\x72\x71\x68\x74\x74\x77\x74\x68\x23\x73\x78\x71\x54\x5E\x8B\xFE\x8B\xD7\xFC\xB9\x80\x00\x00\x00\xBB\x41\x00\x00\x00\x31\xC0\x50\xAC\x33\xC3\xAA\xE2\xFA\x54\x5E\xCC";

int main(){
        void * a = mmap(0, 4096, PROT_EXEC |PROT_READ | PROT_WRITE, MAP_ANONYMOUS | MAP_SHARED, -1, 0);
        printf("allocated executable memory at: %p\n", a);
        ((void (*)(void)) memcpy(a, sc, sizeof(sc)))();
}

root@kali:~/Desktop# gcc -o shellcode shellcode.c
root@kali:~/Desktop# chmod +x shellcode
root@kali:~/Desktop# gdb -q ./shellcode
Reading symbols from ./shellcode...(no debugging symbols found)...done.
(gdb) run
Starting program: /root/Desktop/shellcode 
allocated executable memory at: 0xb7fd0000

Program received signal SIGTRAP, Trace/breakpoint trap.
0xb7fd00c0 in ?? ()
(gdb) info registers 
eax            0x36	54
ecx            0x0	0
edx            0xbffff278	-1073745288
ebx            0x41	65
esp            0xbffff274	0xbffff274
ebp            0xbffff328	0xbffff328
esi            0xbffff274	-1073745292
edi            0xbffff2f8	-1073745160
eip            0xb7fd00c0	0xb7fd00c0
eflags         0x206	[ PF IF ]
cs             0x73	115
ss             0x7b	123
ds             0x7b	123
es             0x7b	123
fs             0x0	0
gs             0x33	51

(gdb) x/1000s $sp
0xbffff274:	""
0xbffff275:	""
0xbffff276:	""
0xbffff277:	""
0xbffff278:	"b290556582307bbb6bc41cb5a92a9b9d1a21370a1b32a0e8797512ea10c243f870613d1469012cb4cf05d554a51a92c3cb05ed05251b835fd0bb338574bc2cd6"
0xbffff2f9:	""
0xbffff2fa:	""
0xbffff2fb:	""
0xbffff2fc:	"\333\005@"
0xbffff300:	"\374\343", <incomplete sequence \372\267>
0xbffff305:	" @"
0xbffff308:	"\334\363\377\277"
0xbffff30d:	""
0xbffff30e:	"\375\267\001"
0xbffff312:	""
0xbffff313:	""
0xbffff314:	"\324\363\377\277@\363\377\277"
0xbffff31d:	""
0xbffff31e:	""
0xbffff31f:	""
0xbffff320:	""
0xbffff321:	"\340", <incomplete sequence \372\267>
0xbffff325:	""
0xbffff326:	""
0xbffff327:	""
0xbffff328:	""
0xbffff329:	""
0xbffff32a:	""
0xbffff32b:	""
0xbffff32c:	"\201\036ß·"
0xbffff331:	"\340", <incomplete sequence \372\267>
0xbffff335:	"\340", <incomplete sequence \372\267>
0xbffff339:	""
0xbffff33a:	""
0xbffff33b:	""
---Type <return> to continue, or q <return> to quit---

Now we have both the Registeration code and the string we got just now. 
# registeration code: 45016
# Secret Key: "b290556582307bbb6bc41cb5a92a9b9d1a21370a1b32a0e8797512ea10c243f870613d1469012cb4cf05d554a51a92c3cb05ed05251b835fd0bb338574bc2cd6"
link to register for the course: https://www.offensive-security.com/preregistration.php?cid=26


